*vim-go-highlight.txt* Go highlight plugin
*vim-go-highlight*
==============================================================================
SYNTAX HIGHLIGHTING                                 *ft-go-syntax* *go-syntax*

vim-go comes with an enhanced version of Vim's Go syntax highlighting. It
comes with a number of features, most of which are disabled by default.

The recommended settings are the default values. If you're experiencing
slowdowns in Go files and you enabled some of these options then try disabling
them; some can be resource intensive.

                                                          *'g:go_fold_enable'*

Control syntax-based folding which takes effect when 'foldmethod' is set to
`syntax`.
You can enable specific fold regions by setting an array. Possible values are:

 block                `{` .. `}` blocks.
 import               `import` block.
 varconst             `var` and `const` blocks.
 package_comment      The package comment.
 comment              Any comment that is not the package comment.

By default all except "comment" are enabled:
>
  let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']
<
Enable folding of only imports:
>
  let g:go_fold_enable = ['import']
<
Disable everything (same as not setting 'foldmethod' to `syntax`):
>
  let g:go_fold_enable = []
<
                                     *'g:go_highlight_array_whitespace_error'*

Highlight white space after `[]`. >

  let g:go_highlight_array_whitespace_error = 0
<
                                      *'g:go_highlight_chan_whitespace_error'*

Highlight white space around the receive operator (`<-`) that doesn't follow
the standard style. >

  let g:go_highlight_chan_whitespace_error = 0
<
                                                *'g:go_highlight_extra_types'*

Highlight commonly used library types (`io.Reader`, etc.). >

  let g:go_highlight_extra_types = 0
<
                                            *'g:go_highlight_space_tab_error'*

Highlight instances of tabs following spaces. >

  let g:go_highlight_space_tab_error = 0
<
                                  *'g:go_highlight_trailing_whitespace_error'*

Highlight trailing white space. >

  let g:go_highlight_trailing_whitespace_error = 0
<
                                                  *'g:go_highlight_operators'*

Highlight operators such as `:=` , `==`, `-=`, etc.
>
  let g:go_highlight_operators = 0
<
                                                  *'g:go_highlight_functions'*

Highlight function and method declarations.
>
  let g:go_highlight_functions = 0
<
                                       *'g:go_highlight_function_parameters'*

Highlight the variable names in parameters (including named return parameters)
in function declarations. Setting this implies the functionality from
|'g:go_highlight_functions'|.
>
  let g:go_highlight_function_parameters = 0
<
                                             *'g:go_highlight_function_calls'*

Highlight function and method calls.
>
  let g:go_highlight_function_calls = 0
<
                                                      *'g:go_highlight_types'*

Highlight struct and interface names.
>
  let g:go_highlight_types = 0
<
                                                     *'g:go_highlight_fields'*

Highlight struct field names.
>
  let g:go_highlight_fields = 0
<
                                          *'g:go_highlight_build_constraints'*

Highlights build constraints.
>
  let g:go_highlight_build_constraints = 0
<
                                              *'g:go_highlight_generate_tags'*

Highlight go:generate directives.
>
  let g:go_highlight_generate_tags = 0
<
                                          *'g:go_highlight_string_spellcheck'*

Highlight spelling errors in strings when |spell| is enabled.
>
  let g:go_highlight_string_spellcheck = 1
<
                                             *'g:go_highlight_format_strings'*

Highlight printf-style formatting verbs inside string literals.
>
  let g:go_highlight_format_strings = 1
<
                                      *'g:go_highlight_variable_declarations'*

Highlight variable names in variable declarations (`x` in ` x :=`).
>
  let g:go_highlight_variable_declarations = 0
<
                                       *'g:go_highlight_variable_assignments'*

Highlight variable names in variable assignments (`x` in `x =`).
>
  let g:go_highlight_variable_assignments = 0
<
                                          *'g:go_highlight_diagnostic_errors'*

Highlight diagnostic errors.
>
  let g:go_highlight_diagnostic_errors = 1
<
                                        *'g:go_highlight_diagnostic_warnings'*

Highlight diagnostic warnings.
>
  let g:go_highlight_diagnostic_warnings = 1
==============================================================================
